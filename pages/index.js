import { useState, useEffect } from "react";
import axios from "axios";
import Head from "next/head";
import Posts from "../components/Posts";

/**
 * first find out how to get data from reddit api
 * then make a request
 * how? using react-query and axios
 * we're only making a GET request so it'll be easy
 * I want a form to search for a subreddit
 * when the form is submitted, it will make a request to the reddit api with the form's value
 * then get the response and store it in the useState hook
 * it will have a loading, error, and actual content displayed
 * along with infinite gallery scrolling/loading?
 * clicking on an image will route to a more detailed page of the post or I could just route to the original link
 *
 *
 * Nice to have:
 * save the subreddit in a store and show it under the search as a recent search item
 * also have popular subreddits somewhere on the app
 *
 * data fetching at index.js
 * then pass it down to form component
 * after fetching, it gets passed up
 * then data passed down to posts component
 * clicking on an image goes to a post route with post component
 */

/**
 * TODO: move data fetching and storing logic to a custom hook
 * TODO: clean up code and move into appropriate component
 * TODO: fetch is returning same data, figure out how to clean up so we get new data on filter
 * TODO: add infinite scrolling
 *
 */

export default function Home() {
  const [posts, setPosts] = useState([]);
  const [subreddit, setSubreddit] = useState("");
  const [query, setQuery] = useState("");
  // const [category, setCategory] = useState("hot");
  const [isLoading, setIsLoading] = useState(null);
  const [err, setErr] = useState(null);
  const controller = new AbortController();

  // console.log(posts);
  // const categories = ["hot", "top", "new", "best", "rising"];

  // const catButtons = categories.map((cat) => (
  //   <Button
  //     key={cat}
  //     onClick={() => filterItem(cat)}
  //     isActive={category === cat}
  //   >
  //     {cat}
  //   </Button>
  // ));

  // const filterItem = (curCat) => {
  //   const newItem = categories.find((newCat) => newCat === curCat);
  //   setCategory(newItem);
  //   if (subreddit) {
  //     setErr(null);
  //     getSubreddit();
  //   } else {
  //     setErr("Enter a subreddit");
  //   }
  // };

  const url = `https://www.reddit.com/r/${subreddit}/hot.json?restrict_sr=true&include_over_18=on`;

  const getSubreddit = async () => {
    setIsLoading(true);
    try {
      const { data } = await axios.get(url, {
        signal: controller.signal,
      });
      setPosts(data.data.children);
    } catch (e) {
      console.log(e.message);
    } finally {
      setIsLoading(false);
    }
    return () => controller.abort();
  };

  const handleChange = ({ target }) => {
    setQuery(target.value);
    setSubreddit(target.value);
    setErr(null);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (query !== "" && query.length > 0) {
      setQuery("");
      getSubreddit();
    } else {
      setErr("Enter a subreddit");
    }
  };

  return (
    <div className="bg-base-100 min-h-screen">
      <Head>
        <title>Reddit Image Gallery with Next JS</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <nav className="navbar bg-base-300 w-full sticky top-0 z-10">
        {err && <h2>{err}</h2>}
        <div>
          <a className="btn btn-ghost normal-case text-xl text-slate-400">
            Reddit Viewer
          </a>
        </div>

        <div>
          <form className="form-control w-64 sm:w-96" onSubmit={handleSubmit}>
            <input
              className="input m-2 input-bordered w-full rounded-full max-w-xs"
              placeholder="Search subreddit"
              type="text"
              value={query}
              onChange={handleChange}
            />
          </form>
        </div>
      </nav>
      <main className="px-4 p-20 flex flex-column justify-center">
        {/* <div>Current Query: {query}</div>
        <div>Current Sub: {subreddit}</div>
        <div>Current Url: {url}</div>

        <div>Results</div> */}

        {isLoading ? <p>loading...</p> : <Posts posts={posts} />}
      </main>
    </div>
  );
}
